services:
  # Transcript Processor Service
  transcript-processor:
    build:
      context: .
      dockerfile: services/transcript-processor/Dockerfile
    ports:
      - '5000:5000'
    volumes:
      - shared_data:/shared/data
      - ./services/transcript-processor:/app/src
    environment:
      - OUTPUT_DIR=/shared/data
      - USE_GPU=${USE_GPU}
      - HUGGINGFACEHUB_API_TOKEN=${HUGGINGFACEHUB_API_TOKEN}
      - PYTHONUNBUFFERED=1
    depends_on:
      - ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Question Module Service
  question-module:
    build:
      context: .
      dockerfile: services/question-module/Dockerfile
    ports:
      - '5001:5001'
    volumes:
      - shared_data:/shared/data
      - ./services/question-module:/app # Changed this line
    environment:
      - DATA_DIR=/shared/data
      - CHROMA_DIR=/shared/data/chroma
      - OLLAMA_HOST=http://ollama:11434
      - USE_GPU=${USE_GPU}
      - HUGGINGFACEHUB_API_TOKEN=${HUGGINGFACEHUB_API_TOKEN}
      - LLM_MODEL=${LLM_MODEL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - PYTHONUNBUFFERED=1
    depends_on:
      - ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - app_network
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Audio Module Service
  audio-module:
    build:
      context: .
      dockerfile: services/audio-module/Dockerfile
    ports:
      - '5002:5002'
    volumes:
      - shared_data:/shared/data
      - ./services/audio-module:/app/src
    environment:
      - DATA_DIR=/shared/data
      - AUDIO_DIR=/shared/data/audio
      - USE_GPU=${USE_GPU}
      - TTS_MODEL=${TTS_MODEL}
      - HUGGINGFACEHUB_API_TOKEN=${HUGGINGFACEHUB_API_TOKEN}
      - PYTHONUNBUFFERED=1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - app_network
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: korean-frontend
    ports:
      - '80:80'
    environment:
      - REACT_APP_API_BASE_URL=http://${HOST_IP:-localhost}:5000
      - REACT_APP_QUESTION_API_URL=http://${HOST_IP:-localhost}:5001
      - REACT_APP_AUDIO_API_URL=http://${HOST_IP:-localhost}:5002
    depends_on:
      - transcript-processor
      - question-module
      - audio-module
    restart: unless-stopped

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - '11434:11434'
    volumes:
      - ollama_data:/root/.ollama
    command:
      [
        'sh',
        '-c',
        'ollama serve & sleep 10 && ollama pull ${LLM_MODEL} && tail -f /dev/null',
      ]

  # Add mega-service
  mega-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    volumes:
      - shared_data:/shared/data
    environment:
      - OLLAMA_HOST=ollama
    depends_on:
      - transcript-processor
      - question-module
      - audio-module
      - ollama

  # Start with just prometheus for basic monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

volumes:
  shared_data:
  ollama_data:

networks:
  app_network:
    driver: bridge
